@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@using DataLayer.Models

@model UserView

@{
    ViewData["Title"] = "Utforska singlar";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    bool ProfilRegistrerad = false;
    List<User> listUser = new List<User>();
    listUser = Model.Users.ToList();
    bool HaveFriendRequest = false;

    User _user = new User();
    List<FriendRequest> friendRequests = new List<FriendRequest>();
    List<User> searchableUsers = new List<User>();
}

<!--Checkar ifall användaren är inloggad och har fixat sin profil-->
<!--Ifall namnet i AspNetUsers-tabellen är densamma som namnet i User-tabellen,
    då dessa är löst ihopkopplade-->
@foreach (var item in listUser)
{
    if (SignInManager.IsSignedIn(User) && User.Identity.Name.Equals(item.UserName))
    {
        ProfilRegistrerad = true;
        _user = item;
    }
}

@foreach (var item in Model.FriendRequests)
{
    if (item.Receiver.Id == _user.Id)
    {
        friendRequests.Add(item);
        HaveFriendRequest = true;
    }
}

<body>

<!--Om användaren ej är inloggad-->
@if (!SignInManager.IsSignedIn(User))
{
    <div class="text-center">
        <p>Du måste logga in för att kunna se de heta singlarna</p>
        <a href="/Identity/Account/Login"><p>Logga in</p></a>
        <br />
        <p>Har du inget konto?</p>
        <a href="/Identity/Account/Register"><p>Registrera dig</p></a>
    </div>
}


else
{
    <!--Om användaren är inloggad men ej satt upp sin profil-->
@if (SignInManager.IsSignedIn(User) && ProfilRegistrerad == false)
{
    <div class="text-center">
        <h1>Du har inte fixat din profilsida ännu!</h1>
        <h2>Klicka här för att komma dit: </h2>
        <a href="/Users/Create">Skapa profil</a>
    </div>
}

<!--Om kontot är inaktiverat-->
@if (SignInManager.IsSignedIn(User) && ProfilRegistrerad == true && _user.IsInactivated == true)
{
    <div class="text-center">
        <h2>Ditt konto är inaktiverat!</h2>
        <h3>Missa inte din chans att få snacka med heta singlar ;)</h3>
        <br />
        <h6>Klicka här för att återaktivera ditt konto: </h6>
        <a href="/Users/Edit/@_user.Id">Redigera profil</a>
    </div>
}



<!--Om inloggad, profil registrerad och ej inaktiverad-->
@if (SignInManager.IsSignedIn(User) && ProfilRegistrerad == true && _user.IsInactivated == false)
{
    //Kod för visa vänförfrågnings-headern
    if (HaveFriendRequest)
    {
        <div style="overflow: hidden">
            <marquee>
                <p id="vänförfrågan" style="overflow-x: hidden">
                    Du har fått vänförfrågning av: &nbsp;

                    <!--Loopa genom FriendRequests och se ifall den inloggade
                    fått friendrequest-->
                    <!--Skriv ut de som skickat vänförfrågan-->
                    @foreach (var item in friendRequests)
                    {
                        string senderName = item.Sender.FirstName + " " + item.Sender.LastName;
                        <a id="friendRequestSlider" href="/Users/Details/@item.Sender.Id">@senderName &nbsp;</a>
                    }
                </p>
            </marquee>
        </div>
    }
}

<div class="text-center">
    <h1>Ta chansen att hitta din nya señor eller señorita ;)</h1>
    <input type="text" placeholder="Sök på namn..." id="searchInput" />  &nbsp; <button id="searchBtn">Sök</button>
    &nbsp; &nbsp; &nbsp; &nbsp;<input type="submit" value="Rensa sök" onclick="location.href = '/Home/Explore';" />
    &nbsp; &nbsp; &nbsp; &nbsp;<button type="button" id="HittaPassandePartnerBtn">Hitta passande partner</button>
    <br />
    <br />
</div>

    <!--Div och loop för att visa alla nuvarande profiler-->
    <!--User-modellen och dess items används för att ta fram
        Id, bildUrl och namn-->
    <!--Loop som ger inkrementerat id på alla taggar för varje profil.
        För att senare kunna användas-->
<div id="storDiv">
    @for (int i = 0; i < listUser.Count; i++)
    {
        //Check ifall kontot är inaktiverat eller om man ska kunna bli sökt
        //Checkas också ifall den som är inloggad inte visas, profiler som inte blivit setup visas inte heller
        if (listUser[i].IsInactivated == false && !(listUser[i].Id == _user.Id) && listUser[i].FirstName != null)
        {
            //user objektet läggs till i searchableUsers listan
            if (listUser[i].IsNotSearchable == false)
            {
                searchableUsers.Add(listUser[i]);
            }

            //Skriv ut profilen
            string name = listUser[i].FirstName + " " + listUser[i].LastName;

            <div class="profil" id="profil @listUser[i].Id">
                <a href="/Users/Details/@listUser[i].Id" id="profileLink @listUser[i].Id" class="profileText">
                    <img class="profilBild" src="@listUser[i].ProfilePicture" id="profilePicture @i" />
                    <p id="textUsernameExplore @i" class="profileText">@name</p>
                </a>
            </div>
        }
    }
    </div>
}


</body>

<script>
    //Serializerar searchableUsers
    var searchableUsers = @Html.Raw(Json.Serialize(searchableUsers));
    console.log(searchableUsers);
    //Script för att ta fram profil av det angivna namnet i sökrutan
    //OnClick-event
    var searchKnapp = document.getElementById("searchBtn");
    searchKnapp.addEventListener("click", checkInputKorrekt);

    //Validering av input
    function checkInputKorrekt() {

        var inputNamn = document.getElementById('searchInput').value;
        var inputKorrekt = false;

        //Namn måste vara längre än 2
        //och endast innehålla bokstäver
        if (/^([a-ö]){3,}/i.test(inputNamn)) {
            inputKorrekt = true;
        }

        else {
            alert("Namnet måste vara minst 3 tecken och endast innehålla bokstäver")
        }

        //Om allt stämmer, loopa genom alla profiler
        //Checka ifall något av namnen är densamma som det angivna i sökrutan.
        //Lagra den profilen i variabler, rensa bland alla profiler på sidan
        //och lägg sedan till den hittade profilen
        if (inputKorrekt) {
            var element = document.getElementById("storDiv");
            var divArray = [];
            //index för divArray
            var j = 0;
            var inputNamnLower = inputNamn.toLowerCase();
            //Sedan loopas namnet på alla profiler genom.
            //De matchande profilerna läggs till i divArray
            for (var i = 0; i < searchableUsers.length; i++) {
                var profileName = searchableUsers[i].firstName + " " + searchableUsers[i].lastName
                var profileNameLower = profileName.toLowerCase();
                if (profileNameLower.includes(inputNamnLower)) {
                    var profile = document.getElementById("profil " + searchableUsers[i].id)
                    divArray[j] = profile;
                    j++;
                }
            }

            //rensa alla profiler
            $('.profil').remove();
            //index för divArray
            var x = 0;
            //Alla items i divArray kommer upp på sidan
            for (var i = 0; i < divArray.length; i++) {
                var profileSearched = divArray[x];
                document.getElementById("storDiv").appendChild(profileSearched);
                x++;
            }

            //Inaktivera sök-knappen efter en sökning
            //Klicka på rensa sök för att återställa
            const button = document.getElementById("searchBtn");
            button.disabled = true;
        }
    }
        var inloggad = @Html.Raw(Json.Serialize(_user));
        var PassandePartnerBtn = document.getElementById('HittaPassandePartnerBtn');
        PassandePartnerBtn.addEventListener("click", HittaPassandePartner)
    //funktionen för hitta passande partner som plockar fram de profiler från searchableUsers som har samma hobby
    //som den som är inloggad. De profiler som har samma hobby som den som är inloggad kommer lagras i en array
    //som heter HobbyArray.

    function HittaPassandePartner() {  
        var HobbyArray = [];
        var h = 0;
        var HobbyInloggad = inloggad.hobby;
        for (var i = 0; i < searchableUsers.length; i++) {
            var hobby = searchableUsers[i].hobby;
            if (HobbyInloggad === hobby) {
                var profile = document.getElementById("profil " + searchableUsers[i].id) 
                HobbyArray[h] = profile;
                h++;
            }
        }
        //rensa alla profiler från utforska
        //Om ingen har samma hobby som den som är inloggad skrivs "Ingen verkar dela din hobby..." ut!
       
        $('.profil').remove();
        if (HobbyArray.length == 0) {
            var titelNoMatch = document.createElement('h3');
            titelNoMatch.append("Ingen verkar dela din hobby...");
            titelNoMatch.setAttribute("style", "text-align: center");
            document.getElementById('storDiv').appendChild(titelNoMatch);
        }
        //Else körs när det finns andra användare som har samma hobby som inloggad och då skrivs
        //"Dessa singlar vill också gå på en" + den hobby som inloggad har.
        //De profiler som lagras i HobbyArray kommer appenda till stordiven på utforska sidan.

        else {
            var titelPassandePartner = document.createElement('h3');
            titelPassandePartner.append("Dessa singlar vill också gå på en " + HobbyInloggad + "-dejt!");
            titelPassandePartner.setAttribute("style", "text-align: center");
            document.getElementById('storDiv').appendChild(titelPassandePartner);
            var y = 0;
            for (var i = 0; i < HobbyArray.length; i++) {
                var profileSearched = HobbyArray[y];
                document.getElementById("storDiv").appendChild(profileSearched);
                y++;
            }
        }
    }
</script>

<style>
    body {
        background-color: white;
    }

    #storDiv {
        margin-bottom: 2em;
    }

    .profileText {
        color: mediumvioletred;
    }

        .profileText:hover {
            text-decoration-color: mediumvioletred;
            color: mediumvioletred;
        }

    .profil {
        width: 20%;
        height: 200px;
        margin-bottom: .2em;
        margin-top: 2em;
        float: right;
        text-align: center;
    }

    .profilBild {
        display: block;
        max-width: 80%;
        max-height: 80%;
        margin-right: auto;
        margin-left: auto;
        padding: 0;
    }

    .marquee {
        margin: 0 auto;
        white-space: nowrap;
        overflow: hidden;
    }

        .marquee span {
            display: inline-block;
            padding-left: 100%;
            animation: marquee 5s linear infinite;
        }

    #vänförfrågan {
        background-image: linear-gradient(to left, violet, indigo, blue, green, orange, red, violet, indigo, blue, green, orange, red, violet, indigo, blue, green, orange, red, violet, indigo, blue, green, orange, red);
        -webkit-background-clip: text;
        color: transparent;
    }

    #friendRequestSlider {
        text-decoration: none;
        color: blue;
    }

        #friendRequestSlider:hover {
            text-decoration: underline;
            color: red;
        }
</style>