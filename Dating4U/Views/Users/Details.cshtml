@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@using DataLayer.Models

@model UserDetails

@{
    ViewData["Title"] = "Min profil";
}



@{
    bool ProfilRegistrerad = false;
    string name = Model.FirstName + " " + Model.LastName;
    string age = Model.Age.ToString() + " år gammal";
    //Användaren som är inloggad
    User loggedInUser = new DataLayer.Models.User();

    //Användaren vars profil visas
    User profile = new User();
    profile.Id = Model.Id;
    profile.UserName = Model.UserName;
    profile.FirstName = Model.FirstName;
    profile.LastName = Model.LastName;
    profile.Age = Model.Age;
    profile.Gender = Model.Gender;
    profile.Description = Model.Description;
    profile.ProfilePicture = Model.ProfilePicture;

    bool HaveFriendRequest = false;
    List<FriendRequest> friendRequests = new List<FriendRequest>();
}

<!--Loop för att avgöra vem som är inloggad-->
@foreach (var item in Model.Users)
{
    if (SignInManager.IsSignedIn(User) && item.UserName.Equals(User.Identity.Name))
    {
        ProfilRegistrerad = true;
        loggedInUser = item;
    }
}

<!--Loop för fylla friendRequests-->
@foreach (var item in Model.FriendRequests)
{
    if (item.Receiver.Id == loggedInUser.Id)
    {
        friendRequests.Add(item);
        HaveFriendRequest = true;
    }
}

@if (!SignInManager.IsSignedIn(User))
{
    <div class="text-center">
        <p>Vill du ta del av dessa läckra singlar?</p>
        <a href="/Identity/Account/Register"><p>Registrera dig gratis</p></a>
    </div>

}

@if (SignInManager.IsSignedIn(User) && ProfilRegistrerad == false)
{
    <div class="text-center">
        <h1>Du har inte fixat din profilsida ännu!</h1>
        <h2>Klicka här för att komma dit: </h2>
        <a href="Users/Create">Redigera profil</a>
    </div>

}

@if (SignInManager.IsSignedIn(User) && ProfilRegistrerad == true)
{
    if (HaveFriendRequest)
    {
        <div style="overflow: hidden">
            <marquee>
                <p id="vänförfrågan">
                    Du har fått vänförfrågning av: &nbsp;

                    <!--Loopa genom FriendRequests och se ifall den inloggade
                    fått friendrequest-->
                    <!--Skriv ut de som skickat vänförfrågan-->
                    @foreach (var item in friendRequests)
                    {
                        string senderName = item.Sender.FirstName + " " + item.Sender.LastName;
                        <a id="friendRequestSlider" href="Users/Details/@item.Sender.Id">@senderName &nbsp; &nbsp;</a>
                    }
                </p>
            </marquee>
        </div>
    }


    <h1 id="HeaderText">@name</h1>

    <div class="StoraDiven">
        <div class="BildochText">
            <img id="bild" src="@Model.ProfilePicture" />
            <div>
                <h4>Namn</h4>
                <p class="ProfilText">@name</p>
            </div>
            <div>
                <h4>Ålder</h4>
                <p class="ProfilText">@age</p>
            </div>
            <div>
                <h4>Kön</h4>
                <p class="ProfilText">@Model.Gender</p>
            </div>
            <div>
                <h4>Om mig</h4>
                <p class="ProfilText">@Model.Description</p>
            </div>
            <br />
            <p id="friendRequestText"></p>
            <input type="button" value="Lägg till vän" id="AddFriendBtn" />
        </div>


        <div class="Väggen">
            <h4>Vägg</h4>
            <textarea id="txtAreaMsg" type="text" rows="5" cols="60" name="description"></textarea><input type="submit" value="Skicka Meddelande" id="MessageBtn" />
            <div id="TheWall">
                @{//Loop för att fylla i alla meddelanden
                    //Gå genom alla meddelanden i databas
                    foreach (var item in Model.Messages)
                    {
                        //Om meddelandet är till den nuvarande profilens sida
                        if (item.Receiver.Id == profile.Id)
                        {
                            var senderName = "";
                            //Hämta namnet på användare som skickat meddelande
                            foreach (var sender in Model.Users)
                            {
                                if (sender == item.Sender)
                                {
                                    senderName = sender.FirstName + " " + sender.LastName;
                                }
                            }
                            string senderMessage = senderName + ": " + item.Message;

                            <p id="wallText">@senderMessage</p>
                            <hr />
                        }

                    }
                }
            </div>
        </div>
    </div>
}



<script>
    //Variabler för att lagra användaren och profilen som visas
    var profil = @Html.Raw(Json.Serialize(profile));

    var inloggad = @Html.Raw(Json.Serialize(loggedInUser));

    //Variabel för message-knapp
    var btnMessage = document.getElementById('MessageBtn');
    //Variabel för sendFriendRequest-knapp
    var btnAddFriend = document.getElementById('AddFriendBtn');
    //Variabel för vän-check
    var isFriends = false;
    //Variabel för FriendRequestId
    var FriendRequestId;

    //En check som kollar ifall den som är inloggad är vän med profilen man besöker
    var Friends = @Html.Raw(Json.Serialize(Model.Friends));
    console.log(Friends)
    for (var i = 0; i < Friends.length; i++) {
        //Två if-statements som kollar ifall id på den inloggade och profilen finns i någon av kolumnerna i Friendstabellen
        //Då det skiljer sig vilken kolumn i databasen användarna hamnar i beroende på ifall de skickade eller accepterade

        //Om en match hittas så sätts isFriends till true
        if (profil.id == Friends[i].friend_1.id && inloggad.id == Friends[i].friend_2.id) {
            btnAddFriend.disabled = true;
            btnAddFriend.value = "Ni är vänner";
            console.log("träff");
            isFriends = true;
            break;
        }
        if (profil.id == Friends[i].friend_2.id && inloggad.id == Friends[i].friend_1.id) {
            btnAddFriend.disabled = true;
            btnAddFriend.value = "Ni är vänner"
            isFriends = true;
            break;
        }
    }

    //Ifall inte vänner
    if (!isFriends) {
        //Checka ifall användaren redan skickat vänförfrågan till profilen
        //eller ifall profilen redan skickat vänförfrågan till användaren
        //Loopar genom tabellen FriendRequest
        var FriendRequests = @Html.Raw(Json.Serialize(Model.FriendRequests));

        for (var i = 0; i < FriendRequests.length; i++) {

            //Ifall den inloggade skickat friendrequest
            if (profil.id == FriendRequests[i].receiver.id && inloggad.id == FriendRequests[i].sender.id) {
                btnAddFriend.disabled = true;
                btnAddFriend.value = "Vänförfrågan skickad"
                break;
            }

            //Ifall den inloggade fått friendrequest från profilen
            if (profil.id == FriendRequests[i].sender.id && inloggad.id == FriendRequests[i].receiver.id) {
                btnAddFriend.value = "Bekräfta förfrågan"
                btnAddFriend.id = "confirmAddFriendBtn"
                FriendRequestId = FriendRequests[i].id;
                break;
            }
        }
    }
    //Event för att skicka meddelande genom Json-objekt
    btnMessage.addEventListener("click", PostMessage);

    //Funktion för att posta meddelande
    function PostMessage()
    {
        var textAreaValue = document.getElementById('txtAreaMsg').value;
        //Checka ifall tom ruta
        if (textAreaValue != "")
        {
            var message = { Sender: inloggad.id, Receiver: profil.id, Message: textAreaValue }
            $.ajax({
                url: "/api/UserWalls/PostMessage",
                type: 'POST',
                data: JSON.stringify(message),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: alert("Meddelandet har skickats!")
            })

            //Skapa variabel med sändare och meddelande
            var senderMessage = inloggad.firstName + " " + inloggad.lastName + ": " + textAreaValue;

            //Skapa taggar och appenda meddelandet på väggen
            var node = document.createElement("P");
            var hrNode = document.createElement("hr");
            node.setAttribute("id", "wallText");
            var textnode = document.createTextNode(senderMessage);
            node.appendChild(textnode);
            node.appendChild(hrNode);

            document.getElementById("TheWall").appendChild(node);

            //rensa textrutan
            document.getElementById("txtAreaMsg").value = "";
        }
        else
            alert("Rutan får inte vara tom!")
    }


    //Check innan funktion SendFriendRequest() körs
    if (btnAddFriend.disabled == false && btnAddFriend.id == "AddFriendBtn") {

        btnAddFriend.addEventListener("click", SendFriendRequest);
    }
        
    //Funktion för att lägga till vän
    //Fungerar på samma sätta som skript för skicka meddelande.
    //Sparar datan i ett Json-objekt som skickas till
    //metoden Post i FriendRequestsController
    function SendFriendRequest()
    {
        var friendRequest = { Sender: inloggad.id, Receiver: profil.id }
            $.ajax({
                url: "/api/FriendRequests/SendFriendRequest",
                type: 'POST',
                data: JSON.stringify(friendRequest),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: alert("Vänförfrågning har skickats!")
            })

        btnAddFriend.disabled = true;
        btnAddFriend.value = "Vänförfrågan skickad";
    }

    //If- för att checka ifall funktion för bekräfta förfrågan bör köras
    if (btnAddFriend.disabled == false && btnAddFriend.id == "confirmAddFriendBtn") {
        btnAddFriend.addEventListener("click", confirmFriendRequest)
    }

    //Funktion för att bekräfta förfrågan
    function confirmFriendRequest() {
        var friends = { Friend_1: inloggad.id, Friend_2: profil.id }
        $.ajax({
            url: "/api/Friends/AddFriends",
            type: 'POST',
            data: JSON.stringify(friends),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: alert("Vänförfrågan accepterad!")
        })
        btnAddFriend.disabled = true;
        btnAddFriend.value = "Ni är nu vänner";
        DeleteFriendRequest();
    }

    function DeleteFriendRequest() {
        $.ajax({
            url: "/api/FriendRequests/" + FriendRequestId,
            type: 'DELETE',
            contentType: "application/json; charset=utf-8",

        })
    }

</script>


<!--Behövs även en check för att se ifall användaren redan skickat en vänförfågan
    till den andra användaren.
    Eller ifall den redan fått en vänförfrågan från den andra användaren-->



<style>
    #HeaderText {
        text-align: center;
        margin-bottom: 5%;
    }

    .ProfilText {
        width: 100%;
    }

    .StoraDiven {
        display: flex;
    }

    .BildochText {
        width: 30%;
        height: auto;
    }

    .InfoDiven {
        width: 30%;
        height: auto;
    }

    .Väggen {
        width: 60%;
        height: auto;
        margin-left: 5%;
    }

    #TheWall {
        width: 100%;
        height: auto;
        min-height: 20%;
        margin-top: 3%;
        border: solid;
        border-radius: 1em;
        border-width: -1em;
    }

    #wallText {
        margin-left: 1em;
        margin-right: 1em;
        margin-top: .5em;
        margin-bottom: .5em;
    }

    hr {
        margin-top: 0.5em;
        margin-bottom: 0.5em;
        margin-left: auto;
        margin-right: auto;
        border-style: inset;
        border-width: 1px;
    }

    .Friends {
        border: solid;
        border-radius: 1em;
    }

    ul {
        list-style: none;
    }

    #bild {
        max-width: 100%;
        max-height: 50%;
    }

    .MessageBtn {
        background-color: blue;
        border: solid;
        border-color: black;
        border-radius: 2em;
    }

    .marquee {
        margin: 0 auto;
        white-space: nowrap;
        overflow: hidden;
    }

        .marquee span {
            display: inline-block;
            padding-left: 100%;
            animation: marquee 5s linear infinite;
        }

    #vänförfrågan {
        background-image: linear-gradient(to left, violet, indigo, blue, green, orange, red, violet, indigo, blue, green, orange, red, violet, indigo, blue, green, orange, red, violet, indigo, blue, green, orange, red);
        -webkit-background-clip: text;
        color: transparent;
    }

    #friendRequestSlider {
        text-decoration: none;
        color: blue;
    }

        #friendRequestSlider:hover {
            text-decoration: underline;
            color: red;
        }
</style>
